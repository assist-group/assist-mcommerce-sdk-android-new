plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-parcelize'
    id 'kotlin-kapt'
    id 'io.gitlab.arturbosch.detekt'
}

android {
    namespace 'ru.assist.sdk'
    compileSdk 33

    defaultConfig {
        minSdk 24
        targetSdk 33
    }

    viewBinding {
        enabled = true
    }

    buildTypes {
        debug {
            minifyEnabled false
            buildConfigField("String","VERSION_NAME","\"$sdk_version_name\"")
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField("String","VERSION_NAME","\"$sdk_version_name\"")
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    libraryVariants.configureEach { variant ->
        variant.outputs.configureEach { output ->
            outputFileName = "assistsdk-$sdk_version_name-${variant.baseName}-${getDate("yyyyMMdd-HHmmss")}.aar"
        }
    }
}

detekt {
    buildUponDefaultConfig = true // preconfigure defaults
    allRules = true // activate all available (even unstable) rules.

    basePath = projectDir
}

tasks.detekt.jvmTarget = "1.8"

tasks.named("detekt").configure {
    reports {
        html.required.set(true)
        html.outputLocation.set(file("build/reports/detekt/detekt.html"))
        xml.required.set(false)
        txt.required.set(true)
        txt.outputLocation.set(file("build/reports/detekt/detekt.txt"))
        sarif.required.set(true)
        sarif.outputLocation.set(file("build/reports/detekt/detekt.sarif"))
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.8.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation "androidx.activity:activity-ktx:1.6.1"

    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    implementation("com.squareup.retrofit2:converter-simplexml:$retrofitVersion") {
        exclude module: 'stax'
        exclude module: 'stax-api'
        exclude module: 'xpp3'
    }
    implementation "com.squareup.okhttp3:okhttp:$okHttp3Version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okHttp3Version"

    implementation 'org.jsoup:jsoup:1.15.3'

    // dagger2
    implementation "com.google.dagger:dagger:$dagger2Version"
    implementation "com.google.dagger:dagger-android:$dagger2Version"
    implementation "com.google.dagger:dagger-android-support:$dagger2Version"
    kapt "com.google.dagger:dagger-compiler:$dagger2Version"
    kapt "com.google.dagger:dagger-android-processor:$dagger2Version"

    implementation "androidx.room:room-runtime:$roomVersion"
    implementation "androidx.room:room-ktx:$roomVersion"
    kapt "androidx.room:room-compiler:$roomVersion"
}

def static getDate(String format = "dd.MM.yyyy HH:mm:ss") {
    new Date().format(format)
}